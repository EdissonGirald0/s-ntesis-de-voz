# 🚀 Docker Compose Override - Production
# Configuración optimizada para producción

version: '3.8'

services:
  
  # 🚀 APLICACIÓN EN PRODUCCIÓN
  tts-app:
    build:
      target: production
    deploy:
      replicas: 3  # Múltiples instancias para alta disponibilidad
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - LOG_LEVEL=WARNING
      - RATE_LIMIT_PER_MINUTE=10
      - RATE_LIMIT_PER_HOUR=100
      # Security headers
      - SECURE_SSL_REDIRECT=True
      - SECURE_HSTS_SECONDS=31536000
      - SECURE_CONTENT_TYPE_NOSNIFF=True
      - SECURE_BROWSER_XSS_FILTER=True
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # 🗄️ POSTGRESQL OPTIMIZADO PARA PRODUCCIÓN
  postgres:
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # Debe ser segura
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Configuración optimizada de PostgreSQL
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # 🔄 REDIS OPTIMIZADO
  redis:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    command: >
      redis-server
      --appendonly yes
      --maxmemory 400mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # 🔍 NGINX CON SSL Y OPTIMIZACIONES
  nginx:
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
      - /var/log/nginx:/var/log/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # 📊 MONITORING SERVICES
  prometheus:
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    profiles:
      - monitoring

  grafana:
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    profiles:
      - monitoring

  # 🚨 ALERTMANAGER
  alertmanager:
    image: prom/alertmanager:latest
    container_name: tts-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    networks:
      - tts-network
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
    profiles:
      - monitoring

  # 📈 NODE EXPORTER PARA MÉTRICAS DEL SISTEMA
  node-exporter:
    image: prom/node-exporter:latest
    container_name: tts-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - tts-network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    profiles:
      - monitoring

  # 🔒 BACKUP SERVICE
  backup:
    image: postgres:15-alpine
    container_name: tts-backup
    networks:
      - tts-network
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=tts_db
      - POSTGRES_USER=tts_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
    command: >
      sh -c "
      while true; do
        sleep 86400;
        /backup.sh;
      done"
    depends_on:
      - postgres
    profiles:
      - backup

  # 🧹 LOG ROTATION SERVICE
  logrotate:
    image: alpine:latest
    container_name: tts-logrotate
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logrotate/logrotate.conf:/etc/logrotate.conf:ro
    command: >
      sh -c "
      while true; do
        logrotate -f /etc/logrotate.conf;
        sleep 3600;
      done"
    profiles:
      - maintenance

volumes:
  prometheus_data:
    driver: local

# =====================================
# 🚀 COMANDOS DE PRODUCCIÓN
# =====================================
#
# 🚀 Deploy completo en producción:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml --profile monitoring --profile backup up -d
#
# 📊 Solo monitoreo:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml --profile monitoring up -d
#
# 🔒 Solo backup:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml --profile backup up -d
#
# 🔄 Rolling update:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-deps tts-app
#
# 📋 Verificar estado:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml ps
#
# 📊 Ver métricas:
# curl http://localhost:9090  # Prometheus
# curl http://localhost:3000  # Grafana
#
# 🗄️ Backup manual:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec backup /backup.sh
#
# 🔍 Logs centralizados:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml logs -f --tail=100
#
