# 🐳 Docker Compose - Sistema de Síntesis de Voz
# Configuración completa para desarrollo y producción

version: '3.8'

# =====================================
# 🌐 NETWORKS
# =====================================
networks:
  tts-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================================
# 💾 VOLUMES
# =====================================
volumes:
  # Volúmenes persistentes para datos
  tts_uploads:
    driver: local
  tts_output:
    driver: local
  tts_cache:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

# =====================================
# 🛠️ SERVICES
# =====================================
services:
  
  # 🚀 APLICACIÓN PRINCIPAL TTS
  tts-app:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: tts-app
    restart: unless-stopped
    ports:
      - "${FLASK_PORT:-5000}:5000"
    networks:
      - tts-network
    volumes:
      - tts_uploads:/app/uploads
      - tts_output:/app/output
      - tts_cache:/app/temp_audio
      - ./logs:/app/logs
    environment:
      # Flask Configuration
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key}
      
      # API Keys
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Database
      - DATABASE_URL=postgresql://tts_user:${POSTGRES_PASSWORD:-tts_password}@postgres:5432/tts_db
      - REDIS_URL=redis://redis:6379/0
      
      # TTS Configuration
      - DEFAULT_TTS_ENGINE=${DEFAULT_TTS_ENGINE:-elevenlabs}
      - DEFAULT_VOICE_ID=${DEFAULT_VOICE_ID:-21m00Tcm4TlvDq8ikWAM}
      
      # Security
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-10}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tts-app.rule=Host(`tts.localhost`)"
      - "traefik.http.services.tts-app.loadbalancer.server.port=5000"

  # 🔄 REDIS CACHE
  redis:
    image: redis:7-alpine
    container_name: tts-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - tts-network
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    sysctls:
      - net.core.somaxconn=1024

  # 🗄️ POSTGRESQL DATABASE
  postgres:
    image: postgres:15-alpine
    container_name: tts-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - tts-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DB=tts_db
      - POSTGRES_USER=tts_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-tts_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tts_user -d tts_db"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 🔍 NGINX REVERSE PROXY
  nginx:
    image: nginx:alpine
    container_name: tts-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    networks:
      - tts-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - tts-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 📊 PROMETHEUS MONITORING
  prometheus:
    image: prom/prometheus:latest
    container_name: tts-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - tts-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    profiles:
      - monitoring

  # 📈 GRAFANA DASHBOARD
  grafana:
    image: grafana/grafana:latest
    container_name: tts-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - tts-network
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    profiles:
      - monitoring

# =====================================
# 🧪 DEVELOPMENT OVERRIDE
# =====================================
# Archivo: docker-compose.dev.yml
# Usar con: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# =====================================
# 🚀 PRODUCTION OVERRIDE  
# =====================================
# Archivo: docker-compose.prod.yml
# Usar con: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

# =====================================
# 📋 COMANDOS ÚTILES
# =====================================
# 
# 🔧 Desarrollo:
# docker-compose up tts-app redis postgres
# 
# 🚀 Producción completa:
# docker-compose --profile monitoring up -d
# 
# 🧪 Solo testing:
# docker-compose run --rm tts-app python -m pytest
# 
# 📊 Con monitoreo:
# docker-compose --profile monitoring up -d
# 
# 🔄 Reconstruir:
# docker-compose build --no-cache
# 
# 📋 Ver logs:
# docker-compose logs -f tts-app
# 
# 🧹 Limpiar:
# docker-compose down -v --remove-orphans
# 
# 🔍 Debugging:
# docker-compose exec tts-app bash
# 
# 🗄️ Backup DB:
# docker-compose exec postgres pg_dump -U tts_user tts_db > backup.sql
# 
# 📈 Scaling:
# docker-compose up --scale tts-app=3
# 
# =====================================
